name: Deploy Website to GCP Compute Engine

env: 
  DEBUG: true
  
on:
  push:
    branches: [main]  # Trigger deployment when a PR is opened or merged into the main branch.

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v3  # Check out the code from the repository

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Verify SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_INSTANCE_IP }} << 'EOF'
          # Check Node.js and npm versions
          node -v
          npm -v
        EOF

    - name: SSH into the GCP instance and deploy the application
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_INSTANCE_IP }} << 'EOF'
        
        # Navigate to the project directory
        cd /home/${{ secrets.GCP_USERNAME }}/Website
    
        # Pull the latest changes from the main branch
        git pull origin main

        # Inastall node packages
        npm install
    
        # Build the application
        npm run build
    
        # Restart the application service
        sudo service website-app restart
    
        EOF

    - name: 'Fetch PR Details'
      id: pr_details
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository }}:${{ github.ref_name }})
        
        echo "::set-output name=creator::$(echo $PR_INFO | jq -r '.[0].user.login')"
        echo "::set-output name=approver::$(echo $PR_INFO | jq -r '.[0].requested_reviewers[0].login')"
        echo "::set-output name=merger::$(echo $PR_INFO | jq -r '.[0].merged_by.login')"

    # Send a success or failure notification based on deployment outcome
    - name: 'Send Deployment Status Notification to Discord'
      if: always()
      run: |
        STATUS=$([[ ${{ job.status }} == 'success' ]] && echo ":white_check_mark: Deployment successful" || echo ":x: Deployment failed")
        curl -X POST -H "Content-Type: application/json" \
        -d "{\"content\":\"**Deploy TernKey**\n**Creator:** ${{ steps.pr_details.outputs.creator }}\n**Approver:** ${{ steps.pr_details.outputs.approver }}\n**Merger:** ${{ steps.pr_details.outputs.merger }}\n**Status:** $STATUS\"}" \
        ${{ secrets.DISCORD_WEBHOOK_URL }}
